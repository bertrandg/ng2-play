System.register([], function(exports_1) {
    var __extends = (this && this.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var SbElement, SbSegment, SbCriterion, SbGroup, SegmentBuilderService;
    return {
        setters:[],
        execute: function() {
            SbElement = (function () {
                function SbElement(position, type) {
                    this.position = position;
                    this.type = type;
                    this.recentAction = false;
                    this.id = Math.round(Math.random() * 1000000);
                }
                return SbElement;
            })();
            exports_1("SbElement", SbElement);
            SbSegment = (function (_super) {
                __extends(SbSegment, _super);
                function SbSegment(position, name) {
                    _super.call(this, position, 'segment');
                    this.name = name;
                }
                return SbSegment;
            })(SbElement);
            exports_1("SbSegment", SbSegment);
            SbCriterion = (function (_super) {
                __extends(SbCriterion, _super);
                function SbCriterion(position, name) {
                    _super.call(this, position, 'criterion');
                    this.name = name;
                }
                return SbCriterion;
            })(SbElement);
            exports_1("SbCriterion", SbCriterion);
            SbGroup = (function (_super) {
                __extends(SbGroup, _super);
                function SbGroup(position, relation, children) {
                    _super.call(this, position, 'group');
                    this.relation = relation;
                    this.children = children;
                }
                return SbGroup;
            })(SbElement);
            exports_1("SbGroup", SbGroup);
            SegmentBuilderService = (function () {
                function SegmentBuilderService() {
                    this.rootGroup = new SbGroup(0, 0, [
                        new SbCriterion(0, 'Mon Voisin Totoro'),
                        new SbCriterion(1, 'Tueurs nés'),
                        new SbSegment(2, 'Segment films anciens'),
                        new SbGroup(3, 2, [
                            new SbGroup(0, 1, [
                                new SbSegment(0, 'Segment films espagnols'),
                                new SbCriterion(1, 'Spirit')
                            ]),
                            new SbCriterion(1, 'Le fils de l\'Homme'),
                            new SbSegment(2, 'Segment films d\'animations'),
                        ]),
                        new SbGroup(4, 2, [
                            new SbGroup(0, 0, [
                                new SbSegment(0, 'Segment films muets')
                            ]),
                            new SbCriterion(1, 'Mulan')
                        ])
                    ]);
                }
                SegmentBuilderService.prototype.removeElement = function (parentGroup, elem) {
                    var index = parentGroup.children.indexOf(elem);
                    if (index !== -1) {
                        return parentGroup.children.splice(index, 1)[0];
                    }
                };
                SegmentBuilderService.prototype.addElement = function (group, type) {
                    this._sortGroupByPosition(group);
                    var pos = (group.children.length == 0) ? 0 : group.children[group.children.length - 1].position + 1;
                    var elem;
                    switch (type) {
                        case 'criterion':
                            elem = new SbCriterion(pos, '');
                            break;
                        case 'segment':
                            elem = new SbSegment(pos, '');
                            break;
                        case 'group':
                            elem = new SbGroup(pos, 0, []);
                            break;
                        default:
                            throw Error("No type \"" + type + "\" existing !");
                            break;
                    }
                    group.children.push(elem);
                    this._highlightRecentAction(elem);
                };
                SegmentBuilderService.prototype.moveElement = function (elemToMove, toGroup, destIndex) {
                    var fromGroup = this._getParentElement(this.rootGroup, elemToMove);
                    if (fromGroup === toGroup) {
                        console.log('move inside same group');
                        this._moveElementInsideGroup(elemToMove, toGroup, destIndex);
                    }
                    else {
                        console.log('move to another group');
                        this._moveElementInAnotherGroup(elemToMove, fromGroup, toGroup, destIndex);
                    }
                };
                SegmentBuilderService.prototype._moveElementInsideGroup = function (elemToMove, group, destIndex) {
                    var currIndex = group.children.indexOf(elemToMove);
                    if (destIndex == currIndex || destIndex == currIndex + 1) {
                        throw Error('Try to move an element on the same position.. don\'t move it!');
                    }
                    else {
                        var newPosition;
                        switch (true) {
                            case (destIndex == 0):
                                console.log('déplacement au début: destIndex=', destIndex, ' / currIndex=', currIndex);
                                newPosition = group.children[0].position - 1;
                                break;
                            case (destIndex == group.children.length):
                                console.log('déplacement à la fin: destIndex=', destIndex, ' / currIndex=', currIndex);
                                newPosition = group.children[group.children.length - 1].position + 1;
                                break;
                            default:
                                if (destIndex < currIndex)
                                    console.log('déplacement en amont: destIndex=', destIndex, ' / currIndex=', currIndex);
                                else
                                    console.log('déplacement en aval: destIndex=', destIndex, ' / currIndex=', currIndex);
                                newPosition = (group.children[destIndex - 1].position + group.children[destIndex].position) / 2;
                                break;
                        }
                        elemToMove.position = newPosition;
                        this._sortGroupByPosition(group);
                        this._highlightRecentAction(elemToMove);
                    }
                };
                SegmentBuilderService.prototype._moveElementInAnotherGroup = function (elemToMove, fromGroup, toGroup, destIndex) {
                    if (elemToMove instanceof SbGroup) {
                        var parentGroup = toGroup;
                        while (parentGroup != this.rootGroup) {
                            if (parentGroup === elemToMove) {
                                throw Error('Try to move a group inside itself.. Weird!');
                            }
                            parentGroup = this._getParentElement(this.rootGroup, parentGroup);
                        }
                    }
                    var elem = this.removeElement(fromGroup, elemToMove);
                    var newPosition;
                    switch (true) {
                        case (toGroup.children.length == 0):
                            newPosition = 0;
                            break;
                        case (destIndex == 0):
                            console.log('ajout au debut du groupe');
                            newPosition = toGroup.children[0].position - 1;
                            break;
                        case (destIndex == toGroup.children.length):
                            console.log('ajout à la fin du groupe');
                            newPosition = toGroup.children[toGroup.children.length - 1].position + 1;
                            break;
                        default:
                            console.log('ajout à l\'intérieur du groupe');
                            newPosition = (toGroup.children[destIndex - 1].position + toGroup.children[destIndex].position) / 2;
                            break;
                    }
                    elem.position = newPosition;
                    toGroup.children.push(elem);
                    this._sortGroupByPosition(toGroup);
                    this._highlightRecentAction(elem);
                };
                SegmentBuilderService.prototype._sortGroupByPosition = function (group) {
                    group.children.sort(function (a, b) { return a.position - b.position; });
                };
                SegmentBuilderService.prototype._highlightRecentAction = function (element) {
                    element.recentAction = true;
                    setTimeout(function () { return element.recentAction = false; }, 2000);
                };
                SegmentBuilderService.prototype._getParentElement = function (group, element) {
                    var _this = this;
                    var parentElem;
                    group.children.some(function (elem) {
                        if (elem === element) {
                            parentElem = group;
                            return true;
                        }
                        if (elem instanceof SbGroup && !parentElem) {
                            parentElem = _this._getParentElement(elem, element);
                        }
                    });
                    return parentElem;
                };
                return SegmentBuilderService;
            })();
            exports_1("SegmentBuilderService", SegmentBuilderService);
        }
    }
});

//# sourceMappingURL=data:application/json;base64,
